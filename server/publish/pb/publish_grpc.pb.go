// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: publish.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PublishRpcClient is the client API for PublishRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublishRpcClient interface {
	// 视频投稿
	PublishAction(ctx context.Context, in *PublishActionReq, opts ...grpc.CallOption) (*PublishActionResp, error)
	// 发布列表
	PublishList(ctx context.Context, in *PublishListReq, opts ...grpc.CallOption) (*PublishListResp, error)
}

type publishRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewPublishRpcClient(cc grpc.ClientConnInterface) PublishRpcClient {
	return &publishRpcClient{cc}
}

func (c *publishRpcClient) PublishAction(ctx context.Context, in *PublishActionReq, opts ...grpc.CallOption) (*PublishActionResp, error) {
	out := new(PublishActionResp)
	err := c.cc.Invoke(ctx, "/publish.publishRpc/publishAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishRpcClient) PublishList(ctx context.Context, in *PublishListReq, opts ...grpc.CallOption) (*PublishListResp, error) {
	out := new(PublishListResp)
	err := c.cc.Invoke(ctx, "/publish.publishRpc/publishList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublishRpcServer is the server API for PublishRpc service.
// All implementations must embed UnimplementedPublishRpcServer
// for forward compatibility
type PublishRpcServer interface {
	// 视频投稿
	PublishAction(context.Context, *PublishActionReq) (*PublishActionResp, error)
	// 发布列表
	PublishList(context.Context, *PublishListReq) (*PublishListResp, error)
	mustEmbedUnimplementedPublishRpcServer()
}

// UnimplementedPublishRpcServer must be embedded to have forward compatible implementations.
type UnimplementedPublishRpcServer struct {
}

func (UnimplementedPublishRpcServer) PublishAction(context.Context, *PublishActionReq) (*PublishActionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishAction not implemented")
}
func (UnimplementedPublishRpcServer) PublishList(context.Context, *PublishListReq) (*PublishListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishList not implemented")
}
func (UnimplementedPublishRpcServer) mustEmbedUnimplementedPublishRpcServer() {}

// UnsafePublishRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublishRpcServer will
// result in compilation errors.
type UnsafePublishRpcServer interface {
	mustEmbedUnimplementedPublishRpcServer()
}

func RegisterPublishRpcServer(s grpc.ServiceRegistrar, srv PublishRpcServer) {
	s.RegisterService(&PublishRpc_ServiceDesc, srv)
}

func _PublishRpc_PublishAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishActionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishRpcServer).PublishAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/publish.publishRpc/publishAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishRpcServer).PublishAction(ctx, req.(*PublishActionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublishRpc_PublishList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishRpcServer).PublishList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/publish.publishRpc/publishList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishRpcServer).PublishList(ctx, req.(*PublishListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PublishRpc_ServiceDesc is the grpc.ServiceDesc for PublishRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PublishRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "publish.publishRpc",
	HandlerType: (*PublishRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "publishAction",
			Handler:    _PublishRpc_PublishAction_Handler,
		},
		{
			MethodName: "publishList",
			Handler:    _PublishRpc_PublishList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "publish.proto",
}
