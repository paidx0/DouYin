// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: relation.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RelationRpcClient is the client API for RelationRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelationRpcClient interface {
	// 关注和取消操作
	RelationAction(ctx context.Context, in *ActionReq, opts ...grpc.CallOption) (*ActionResp, error)
	// 用户关注列表
	FollowList(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListResp, error)
	// 用户粉丝列表
	FollowerList(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListResp, error)
	// 用户好友列表
	FriendList(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListResp, error)
}

type relationRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewRelationRpcClient(cc grpc.ClientConnInterface) RelationRpcClient {
	return &relationRpcClient{cc}
}

func (c *relationRpcClient) RelationAction(ctx context.Context, in *ActionReq, opts ...grpc.CallOption) (*ActionResp, error) {
	out := new(ActionResp)
	err := c.cc.Invoke(ctx, "/relation.relationRpc/relationAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationRpcClient) FollowList(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListResp, error) {
	out := new(ListResp)
	err := c.cc.Invoke(ctx, "/relation.relationRpc/followList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationRpcClient) FollowerList(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListResp, error) {
	out := new(ListResp)
	err := c.cc.Invoke(ctx, "/relation.relationRpc/followerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationRpcClient) FriendList(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListResp, error) {
	out := new(ListResp)
	err := c.cc.Invoke(ctx, "/relation.relationRpc/friendList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelationRpcServer is the server API for RelationRpc service.
// All implementations must embed UnimplementedRelationRpcServer
// for forward compatibility
type RelationRpcServer interface {
	// 关注和取消操作
	RelationAction(context.Context, *ActionReq) (*ActionResp, error)
	// 用户关注列表
	FollowList(context.Context, *ListReq) (*ListResp, error)
	// 用户粉丝列表
	FollowerList(context.Context, *ListReq) (*ListResp, error)
	// 用户好友列表
	FriendList(context.Context, *ListReq) (*ListResp, error)
	mustEmbedUnimplementedRelationRpcServer()
}

// UnimplementedRelationRpcServer must be embedded to have forward compatible implementations.
type UnimplementedRelationRpcServer struct {
}

func (UnimplementedRelationRpcServer) RelationAction(context.Context, *ActionReq) (*ActionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelationAction not implemented")
}
func (UnimplementedRelationRpcServer) FollowList(context.Context, *ListReq) (*ListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowList not implemented")
}
func (UnimplementedRelationRpcServer) FollowerList(context.Context, *ListReq) (*ListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowerList not implemented")
}
func (UnimplementedRelationRpcServer) FriendList(context.Context, *ListReq) (*ListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendList not implemented")
}
func (UnimplementedRelationRpcServer) mustEmbedUnimplementedRelationRpcServer() {}

// UnsafeRelationRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelationRpcServer will
// result in compilation errors.
type UnsafeRelationRpcServer interface {
	mustEmbedUnimplementedRelationRpcServer()
}

func RegisterRelationRpcServer(s grpc.ServiceRegistrar, srv RelationRpcServer) {
	s.RegisterService(&RelationRpc_ServiceDesc, srv)
}

func _RelationRpc_RelationAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationRpcServer).RelationAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.relationRpc/relationAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationRpcServer).RelationAction(ctx, req.(*ActionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationRpc_FollowList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationRpcServer).FollowList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.relationRpc/followList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationRpcServer).FollowList(ctx, req.(*ListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationRpc_FollowerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationRpcServer).FollowerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.relationRpc/followerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationRpcServer).FollowerList(ctx, req.(*ListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationRpc_FriendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationRpcServer).FriendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.relationRpc/friendList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationRpcServer).FriendList(ctx, req.(*ListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RelationRpc_ServiceDesc is the grpc.ServiceDesc for RelationRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RelationRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "relation.relationRpc",
	HandlerType: (*RelationRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "relationAction",
			Handler:    _RelationRpc_RelationAction_Handler,
		},
		{
			MethodName: "followList",
			Handler:    _RelationRpc_FollowList_Handler,
		},
		{
			MethodName: "followerList",
			Handler:    _RelationRpc_FollowerList_Handler,
		},
		{
			MethodName: "friendList",
			Handler:    _RelationRpc_FriendList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relation.proto",
}
