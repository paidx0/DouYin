// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: feed.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FeedRpcClient is the client API for FeedRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeedRpcClient interface {
	Feed(ctx context.Context, in *FeedReq, opts ...grpc.CallOption) (*FeedResp, error)
}

type feedRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewFeedRpcClient(cc grpc.ClientConnInterface) FeedRpcClient {
	return &feedRpcClient{cc}
}

func (c *feedRpcClient) Feed(ctx context.Context, in *FeedReq, opts ...grpc.CallOption) (*FeedResp, error) {
	out := new(FeedResp)
	err := c.cc.Invoke(ctx, "/feed.feedRpc/feed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeedRpcServer is the server API for FeedRpc service.
// All implementations must embed UnimplementedFeedRpcServer
// for forward compatibility
type FeedRpcServer interface {
	Feed(context.Context, *FeedReq) (*FeedResp, error)
	mustEmbedUnimplementedFeedRpcServer()
}

// UnimplementedFeedRpcServer must be embedded to have forward compatible implementations.
type UnimplementedFeedRpcServer struct {
}

func (UnimplementedFeedRpcServer) Feed(context.Context, *FeedReq) (*FeedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Feed not implemented")
}
func (UnimplementedFeedRpcServer) mustEmbedUnimplementedFeedRpcServer() {}

// UnsafeFeedRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeedRpcServer will
// result in compilation errors.
type UnsafeFeedRpcServer interface {
	mustEmbedUnimplementedFeedRpcServer()
}

func RegisterFeedRpcServer(s grpc.ServiceRegistrar, srv FeedRpcServer) {
	s.RegisterService(&FeedRpc_ServiceDesc, srv)
}

func _FeedRpc_Feed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedRpcServer).Feed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feed.feedRpc/feed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedRpcServer).Feed(ctx, req.(*FeedReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FeedRpc_ServiceDesc is the grpc.ServiceDesc for FeedRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeedRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "feed.feedRpc",
	HandlerType: (*FeedRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "feed",
			Handler:    _FeedRpc_Feed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feed.proto",
}
