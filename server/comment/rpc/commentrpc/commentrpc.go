// Code generated by goctl. DO NOT EDIT!
// Source: comment.proto

package commentrpc

import (
	"context"

	"DouYin/server/comment/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Comment           = __.Comment
	CommentActionReq  = __.CommentActionReq
	CommentActionResp = __.CommentActionResp
	CommentListReq    = __.CommentListReq
	CommentListResp   = __.CommentListResp

	CommentRpc interface {
		// 评论操作
		CommentAction(ctx context.Context, in *CommentActionReq, opts ...grpc.CallOption) (*CommentActionResp, error)
		// 评论列表
		CommentList(ctx context.Context, in *CommentListReq, opts ...grpc.CallOption) (*CommentListResp, error)
	}

	defaultCommentRpc struct {
		cli zrpc.Client
	}
)

func NewCommentRpc(cli zrpc.Client) CommentRpc {
	return &defaultCommentRpc{
		cli: cli,
	}
}

// 评论操作
func (m *defaultCommentRpc) CommentAction(ctx context.Context, in *CommentActionReq, opts ...grpc.CallOption) (*CommentActionResp, error) {
	client := __.NewCommentRpcClient(m.cli.Conn())
	return client.CommentAction(ctx, in, opts...)
}

// 评论列表
func (m *defaultCommentRpc) CommentList(ctx context.Context, in *CommentListReq, opts ...grpc.CallOption) (*CommentListResp, error) {
	client := __.NewCommentRpcClient(m.cli.Conn())
	return client.CommentList(ctx, in, opts...)
}
