// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

package userrpc

import (
	"context"

	"DouYin/server/user/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Req          = __.Req
	Resp         = __.Resp
	User         = __.User
	UserInfoReq  = __.UserInfoReq
	UserInfoResp = __.UserInfoResp

	UserRpc interface {
		// 用户注册接口
		Register(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error)
		// 用户登录接口
		Login(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error)
		// 用户信息
		Userinfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoResp, error)
	}

	defaultUserRpc struct {
		cli zrpc.Client
	}
)

func NewUserRpc(cli zrpc.Client) UserRpc {
	return &defaultUserRpc{
		cli: cli,
	}
}

// 用户注册接口
func (m *defaultUserRpc) Register(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error) {
	client := __.NewUserRpcClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

// 用户登录接口
func (m *defaultUserRpc) Login(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error) {
	client := __.NewUserRpcClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

// 用户信息
func (m *defaultUserRpc) Userinfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoResp, error) {
	client := __.NewUserRpcClient(m.cli.Conn())
	return client.Userinfo(ctx, in, opts...)
}
